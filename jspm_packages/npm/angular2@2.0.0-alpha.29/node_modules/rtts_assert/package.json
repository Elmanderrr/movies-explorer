{
  "name": "rtts_assert",
  "version": "2.0.0-alpha.29",
  "description": "A run-time type assertion library for JavaScript",
  "homepage": "https://github.com/angular/angular",
  "bugs": {
    "url": "https://github.com/angular/angular/issues"
  },
  "contributors": [
    {
      "name": "Alex Eagle",
      "email": "alexeagle@google.com"
    },
    {
      "name": "Chirayu Krishnappa",
      "email": "chirayu@google.com"
    },
    {
      "name": "Jeff Cross",
      "email": "crossj@google.com"
    },
    {
      "name": "Matias Niemela",
      "email": "matsko@google.com"
    },
    {
      "name": "Misko Hevery",
      "email": "misko@google.com"
    },
    {
      "name": "Rado Kirov",
      "email": "radokirov@google.com"
    },
    {
      "name": "Tobias Bosch",
      "email": "tbosch@google.com"
    },
    {
      "name": "Victor Savkin",
      "email": "vsavkin@google.com"
    },
    {
      "name": "Yegor Jbanov",
      "email": "yjbanov@google.com"
    },
    {
      "name": "Jeremy Elbourn",
      "email": "jelbourn@google.com"
    }
  ],
  "license": "Apache-2.0",
  "devDependencies": {
    "yargs": "2.3.*",
    "gulp-sourcemaps": "1.3.*",
    "gulp-traceur": "0.16.*",
    "gulp": "^3.8.8",
    "gulp-rename": "^1.2.0",
    "through2": "^0.6.1"
  },
  "readme": "# Rtts-Assert\n\nA run-time type assertion library for JavaScript.\nDesigned to be used with [Traceur](https://github.com/google/traceur-compiler).\n\nAll sources are in ES6 format. They don't depend on any runtime\nand can be used by any modern ES6 -> ES5 transpiler.\n\nAs a convenience, we provide you with `es5build.js`, a script to transpile the sources into es5\nusing [Google Traceur](https://github.com/google/traceur-compiler/).\n\nLicense: Apache MIT 2.0\n\n## API\n\n```\n// Asserting APIs:\n// - generated by Traceur (based on type annotations)\n// - can be also used in tests for instance\nassert.type(something, Type);\nassert.returnType(returnValue, Type);\nassert.argumentTypes(firstArg, Type, secondArg, Type);\n\n// this can be used anywhere in the code\n// (useful inside test, when we don't wanna define an interface)\nassert(value).is(...)\n\n\n// Custom type assert:\n// - i have a custom type\n// - adding an assert methos\nassert.define(MyUser, function(value) {\n  assert(value).is(Type, Type2); // or\n  assert(value, 'name').is(assert.string);\n  assert(value, 'contact').is(assert.structure({\n    email: assert.string,\n    cell: assert.string\n  }));\n  assert(value, 'contacts').is(assert.arrayOf(assert.structure({email: assert.string})));\n});\n\n\n// Define interface (an empty type with assert method)\n// - returns an empty class with assert method\nvar Email = assert.define('IEmail', function(value) {\n  assert(value).is(String);\n\n  if (value.indexOf('@') !== -1) {\n    assert.fail('has to contain \"@\"');\n  }\n});\n\n\n// Predefined types\nassert.string\nassert.number\nassert.boolean\nassert.arrayOf(...types)\nassert.structure(object)\n```",
  "readmeFilename": "README.md",
  "_id": "rtts_assert@2.0.0-alpha.29",
  "dist": {
    "shasum": "92315df24d0b7bd24a6c8f63df22ae57825776ba"
  },
  "_from": "rtts_assert@2.0.0-alpha.29",
  "_resolved": "https://registry.npmjs.org/rtts_assert/-/rtts_assert-2.0.0-alpha.29.tgz"
}
