export declare var DOM: DomAdapter;
export declare function setRootDomAdapter(adapter: DomAdapter): void;
/**
 * Provides DOM operations in an environment-agnostic way.
 */
export declare class DomAdapter {
    hasProperty(element: any, name: string): boolean;
    setProperty(el: Element, name: string, value: any): void;
    getProperty(el: Element, name: string): any;
    invoke(el: Element, methodName: string, args: List<any>): any;
    logError(error: any): void;
    /**
     * Maps attribute names to their corresponding property names for cases
     * where attribute name doesn't match property name.
     */
    attrToPropMap: StringMap<string, string>;
    parse(templateHtml: string): void;
    query(selector: string): any;
    querySelector(el: any, selector: string): void;
    querySelectorAll(el: any, selector: string): List<any>;
    on(el: any, evt: any, listener: any): void;
    onAndCancel(el: any, evt: any, listener: any): Function;
    dispatchEvent(el: any, evt: any): void;
    createMouseEvent(eventType: any): any;
    createEvent(eventType: string): any;
    preventDefault(evt: any): void;
    getInnerHTML(el: any): string;
    getOuterHTML(el: any): string;
    nodeName(node: any): string;
    nodeValue(node: any): string;
    type(node: any): string;
    content(node: any): any;
    firstChild(el: any): Node;
    nextSibling(el: any): Node;
    parentElement(el: any): Node;
    childNodes(el: any): List<Node>;
    childNodesAsList(el: any): List<Node>;
    clearNodes(el: any): void;
    appendChild(el: any, node: any): void;
    removeChild(el: any, node: any): void;
    replaceChild(el: any, newNode: any, oldNode: any): void;
    remove(el: any): Node;
    insertBefore(el: any, node: any): void;
    insertAllBefore(el: any, nodes: any): void;
    insertAfter(el: any, node: any): void;
    setInnerHTML(el: any, value: any): void;
    getText(el: any): string;
    setText(el: any, value: string): void;
    getValue(el: any): string;
    setValue(el: any, value: string): void;
    getChecked(el: any): boolean;
    setChecked(el: any, value: boolean): void;
    createTemplate(html: any): HTMLElement;
    createElement(tagName: any, doc?: any): HTMLElement;
    createTextNode(text: string, doc?: any): Text;
    createScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement;
    createStyleElement(css: string, doc?: any): HTMLStyleElement;
    createShadowRoot(el: any): any;
    getShadowRoot(el: any): any;
    getHost(el: any): any;
    getDistributedNodes(el: any): List<Node>;
    clone(node: Node): Node;
    getElementsByClassName(element: any, name: string): List<HTMLElement>;
    getElementsByTagName(element: any, name: string): List<HTMLElement>;
    classList(element: any): List<any>;
    addClass(element: any, classname: string): void;
    removeClass(element: any, classname: string): void;
    hasClass(element: any, classname: string): boolean;
    setStyle(element: any, stylename: string, stylevalue: string): void;
    removeStyle(element: any, stylename: string): void;
    getStyle(element: any, stylename: string): string;
    tagName(element: any): string;
    attributeMap(element: any): Map<string, string>;
    hasAttribute(element: any, attribute: string): boolean;
    getAttribute(element: any, attribute: string): string;
    setAttribute(element: any, name: string, value: string): void;
    removeAttribute(element: any, attribute: string): void;
    templateAwareRoot(el: any): void;
    createHtmlDocument(): HTMLDocument;
    defaultDoc(): HTMLDocument;
    getBoundingClientRect(el: any): void;
    getTitle(): string;
    setTitle(newTitle: string): void;
    elementMatches(n: any, selector: string): boolean;
    isTemplateElement(el: any): boolean;
    isTextNode(node: any): boolean;
    isCommentNode(node: any): boolean;
    isElementNode(node: any): boolean;
    hasShadowRoot(node: any): boolean;
    isShadowRoot(node: any): boolean;
    importIntoDoc(node: any): void;
    isPageRule(rule: any): boolean;
    isStyleRule(rule: any): boolean;
    isMediaRule(rule: any): boolean;
    isKeyframesRule(rule: any): boolean;
    getHref(element: any): string;
    getEventKey(event: any): string;
    resolveAndSetHref(element: any, baseUrl: string, href: string): void;
    cssToRules(css: string): List<any>;
    supportsDOMEvents(): boolean;
    supportsNativeShadowDOM(): boolean;
    getGlobalEventTarget(target: string): any;
    getHistory(): History;
    getLocation(): Location;
    getBaseHref(): string;
    getUserAgent(): string;
    setData(element: any, name: string, value: string): void;
    getData(element: any, name: string): string;
    setGlobalVar(name: string, value: any): void;
}
export declare var __esModule: boolean;
